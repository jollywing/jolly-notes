#+TITLE: Elisp 学习笔记
#+AUTHOR:Jiqing Wu
#+EMAIL: jiqingwu@gmail.com

* 学习环境

- \*scratch\*缓冲区中，在行尾按C-j，执行当前的语句。
- 在任何地方，按C-x C-e evaluate 前面的表达式: 变量, 函数等.
  结果将在mini-buffer中显示.
  如果要在缓冲区内显示结果, C-u C-x C-e.
- 你还可以选中一段 elisp 代码, ~M-x eval-region~.
- M-x ielm RET, 将会启动 elisp 的交互环境.

* Hello, world
: (message "Hello, world!")

- (message "Her age is: %d" 16)        ; %d is for number
- (message "Her name is: %s" "Vicky")  ; %s is for string
- (message "My list is: %S" (list 8 2 3))  ; %S is for any lisp expression
  This will get the same result: (message "my list is: %S" '(8 2 3))

* 数据类型

** 数值

判断是不是整数:

- (integerp 1.)                           ; => t
- (integerp 1.0)                          ; => nil

判断是不是浮点数:

- (floatp 1.)                             ; => nil
- (floatp -0.0e+NaN)                      ; => t

判断是不是数字:

- (numberp 1)                             ; => t
- (numberp ?A)                            ; => t
- (numberp "hi")                          ; => nil

判断是否为0:

- (zerop -10)  ; => nil
- (zerop 0)    ; => t

判断是否为非负整数:

- (wholenump 0)         ; => t
- (wholenump 5)         ; => t
- (wholenump 10.0)      ; => nil
- (wholenump -1.1)      ; => nil

数值转换:

- (floor 10.1)            ; => 10, 不比本身大的最接近的整数
- (ceiling 10.2)          ; => 11, 不比本身小的最接近的整数
- (round 5.6)             ; => 6, 四舍五入的整数

- random产生随机数, 用 (random t) 产生新的种子, (% (random) 100)
  可以得到 100 以内的随机数.

*算术运算*

#+BEGIN_SRC lisp
(+ 4 5 9)
(- 9 18)
(- 9 4 5)
(* 9 9)
(/ 7 2) ;; 3
(/ 7 2.0) ;; 3.5
(% 7 4) ;; 3
(expt 2 3) ;; 2^3 = 8
#+END_SRC

数值比较
#+BEGIN_SRC lisp
(< 3 4) ; less than
(> 3 4) ; greater than
(<= 3 4) ; less or equal to
(>= 3 4) ; greater or equal to

(= 3 3)   ; ⇒ t
(= 3 3.0) ; ⇒ t

(/= 3 4) ; not equal. ⇒ t
#+END_SRC

和字符串的转换

#+BEGIN_SRC lisp
(string-to-number "3")
(number-to-string 3)
#+END_SRC

** 字符和字符串

- char(问号开头): ?a. 字符其实就是一个数字, 如 ?A 就是65.
- String: "Hello, world!"

字符串比较

(string-equal "this" "this") ; ⇒ t. 
(string-equal "This" "this") ; => nil.
(not (string-equal "sun" "Sunny")) => t

通用比较用 equal, 查看是否有相同的数据类型和值。

(equal 3 3.0) ; => nil, different data type.
(equal 'abc 'abc); => t, same symbol.
(not (equal 3 4)) ; =>t

** 布尔类型
- nil: 表示空的list或者false. 也可将 nil 写作 ().
  elisp中除了nil, 其它都是真. 所以, 0是true, "" 也是true.
- t: true, 空的向量列表 ~[]~ 也是true.

逻辑运算

(and t nil) => nil
(or t nil) => t

** 列表
- list: (1 2 3 4)，list中的元素叫atom
- car 取列表的第一个元素，(car '(1 2 3)) 得到 1.
- cdr 取列表的第一个元素后面的剩余部分， (cdr '(1 2 3)) 得到 (2 3).
- lisp是函数式语言，每个()之间的部分会被认为函数调用。因此list的第一个元素会被认为是函数名。
  为了防止list被evaluate，在list前加一个 \', 比如 =\'(1 2 3)= 会返回列表本身。

- pair: (apple . 2)
- alist (associated list):一堆pair的集合，类似Python中的词典。
- ...: 表示什么呢？应该是什么路径。亦或是省略的意思？
- 可以用中文字符串作变量名, 如 (setq 个数 10).

* 变量

用 defvar 和 setq 定义的变量都是全局变量.

: (defvar var-name var-value "var-docstring")

用 setq 定义的变量没有文档描述.
: (setq var-name var-value)

在函数内部通常用 let 定义局部变量.
#+BEGIN_SRC lisp
  (let ((var1 value1) var2)
    (statement1)
    (statement2)
  ... ...)
#+END_SRC

其中, var2 只定义, 没有赋值, 默认值为 nil.

* Symbol

lisp can operate variable and function without evaluation,
These variable and function are in *symbol's forms*.
*Symbol* made lisp support /meta-programming/.

- Symbol has *name*, same to the symbol.
- When a symbol is used as *variable*, it has a *value*. Maybe empty.
- When a symbol is used as *function*, it has a *function* definition. Maybe empty.
- Symbol has a *property list*.

You can use *fboundp* to check if a function is defined first (it checks a
symbol's definition cell), and use *boundp* to check if a variable is defined
(it checkes a symbol's value cell)
#+BEGIN_SRC lisp
(fboundp 'setq) ;;t
(boundp 'setq) ;;nil
#+END_SRC

#+BEGIN_SRC lisp
;; check if a variable eval to a lisp symbol
(setq x1 123 )
(symbolp x1)                            ;nil
(setq x2 'xx )
(symbolp x2)                            ;t

;; get a symbol's cell values
(symbol-name 'x1)                       ; "x1"
(symbol-value 'x1)                      ; 123
(symbol-function 'x1)                   ; error. because it's void.
(symbol-plist 'x1)                      ;nil

;; get a symbol's cell values
(symbol-name 'setq)                  ; "setq"
(symbol-value 'setq)                 ; error. because it's void.
(symbol-function 'setq)              ;#<subr setq>
(symbol-plist 'setq)                 ;(byte-compile byte-compile-setq)
#+END_SRC

* 控制结构
** Sequence
只有在函数内部等环境中, 才能顺序执行多个表达式.
如果想在函数外部一次 eval 多个表达式, 需要用 progn.
: (progn A B C ...)

#+BEGIN_SRC lisp
(progn (setq foo 3)
(message "%d + 2 = %d" foo (+ foo 2)))
#+END_SRC

** 分支

if语句:

#+BEGIN_SRC lisp
  (if TRUE-OR-FALSE-TEST
      ACTION-TO-CARRY-OUT-IF-TEST-IS-TRUE)

  (if TRUE-OR-FALSE-TEST
      ACTION-TO-CARRY-OUT-IF-THE-TEST-RETURNS-TRUE
    ACTION-TO-CARRY-OUT-IF-THE-TEST-RETURNS-FALSE)
#+END_SRC

If you need not ELSE part, you can use *when* statement

#+BEGIN_SRC lisp
(when (< 5 10)
  (message "you")
  (message "are")
  (message "a")
  (message "fool"))
#+END_SRC

cond语句, 相当于 switch/case 结构:

#+BEGIN_SRC lisp
  (cond (case1 do-something)
        (case2 do-something)
        ...
        (t do-default-things))
#+END_SRC

例如
#+BEGIN_SRC lisp
  (defun guess-sex (name)
  "guess the person's sex according his name"
  (cond ((string= name "XiaoMing") (message "%s is a boy." name))
  ((string= name "XiaoFang") (message "%s is a girl." name))
  (t (message "I don't know..."))))
#+END_SRC
测试.

#+BEGIN_SRC lisp  
    (guess-sex "XiaoMing")
    (guess-sex "Fang")
#+END_SRC

分支结构离不开值的比较.

+ 数值比较: =, >, <
+ 字符比较: char-equal
+ 字符串比较: string-equal (string=), string-lessp(string<)

斐波那切数列:
#+BEGIN_SRC lisp
  (defun fib (n)
      (cond ((= n 0) 0)
            ((= n 1) 1)
            (t (+ (fib (- n 1)) (fib (- n 2))))))
  
  (fib 5)
#+END_SRC

** Loop

#+BEGIN_SRC lisp
(setq x 0)
(while (< x 10)
  (print (format "x: %d" x))
  (setq x (+ x 1)))
#+END_SRC

* Function

** The function classes
- Function = Most common. Written in elisp. Usually (defun …)
- Primitive = elisp function written in C. ⁖ {list, car, append, point, defun, …}. Typically the most fundamental ones.
- lambda expression = ⁖ (lambda …). Usually temp functions.
- special form = a function that doesn't eval in the normal way. ⁖ {if, cond, and, or, while, progn}. (normally, arguments to a function are all evaluated first.)
- macro = Similar to “special form”, but user-defined. i.e. the arguments are not eval'd, and you can manipulate them and eval them.
- command = functions that can be called by command-execute. Typically, (defun …) with (interactive …) clause. All functions you can call by “M-x” are commands.

* 函数模板

Elisp中, 函数都是全局的.

函数五部分:

#+BEGIN_SRC lisp
     (defun FUNCTION-NAME (ARGUMENTS...)
  		    "OPTIONAL-DOCUMENTATION..."
	            (interactive ARGUMENT-PASSING-INFO)     ; optional
		    BODY...)
#+END_SRC

let语句:

#+BEGIN_SRC lisp
  (let ((VARIABLE VALUE)
        (VARIABLE VALUE)
        ...)
    BODY...)
#+END_SRC

save-excursion语句
将光标位置和当前mark位置保存起来, 以便返回: ::

#+BEGIN_SRC lisp
  (save-excursion
    FIRST-EXPRESSION-IN-BODY
    SECOND-EXPRESSION-IN-BODY
     ...
    LAST-EXPRESSION-IN-BODY)
#+END_SRC


* Command
defun with *interactive*.
* lambda函数

: (lambda (param-list) "function-doc" body)

匿名函数, 通常在使用的时候临时定义.
::

  (funcall (lambda (hello-name) "say hello to someone"
    (message "hello, %s!" hello-name)) "wuchen")

也可以把lambda赋值给一个变量, 再调用:
#+BEGIN_SRC lisp
  (setq hello (lambda (hello-name) "say hello to someone"
    (message "hello, %s!" hello-name)))
  (funcall hello "wuchen")
#+END_SRC

* 常用函数

- (number-to-string n): 将数字n转化成字符串，可以是浮点数。
- (message string): 在echo区显示string。
  格式化输出的例子:
  (message "there are %d persons here" var-name),
  (message "The area is %.2f ." float-var),
  格式字符串中也可使用 \\n, \\t等转义字符.
- (message "The name of this buffer is: %s." (buffer-name))
- (message "The value of fill-column is %d." fill-column)
- (buffer-name) (buffer-file-name) (current-buffer)
- (other-buffer) 返回不可见的buffer中最近访问过的buffer。
- (buffer-size) (point) (point-min) (point-max)


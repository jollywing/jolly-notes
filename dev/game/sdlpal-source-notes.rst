==============================
sdlPal代码阅读笔记
==============================

SDL补课：
==============================

- SDL_malloc
- SDL_calloc
- SDL_SoftStretch
- SDL_UpdateRect
- SDL_LockSurface
- SDL_GetTicks

C语言补课：
==============================

- 虽说goto有害，但c语言中并未禁止使用。
- union类型，如何识别具体是哪种数据。

编码规范：
==============================

- 函数名：首字母大写，有时函数名前加模块名，如某函数在util模块中
  实现，函数名可能为UTIL_FuncName。
- 变量名：匈牙利命名法，数据类型前缀+单词首字母大写。
- 结构名：全大写
- 宏：单词全大写，用下划线相连。
- 函数体格式： ::

    return value
    function name(
    param1,
    param2,
    ... ...
    )
    /*
      Purpose:
        something
      Parameters:
        [IN] name - meaning
        [OUT] name - meaning
        ... ...
      Retrun value:
        value = meaning
        value = meaning
    */
    {
        function body
    }

- 函数内注释： ::

    //
    // comment
    //    

编程技巧
==============================

- 函数内部的宏：如果一个函数体内要重复多次相同的代码块，可以在函
  数内定义一个宏代表该代码块，函数返回前再 `undef` 该宏。
- 在函数体内部声明一个静态字符串，函数退出该字符串依然存在，相当
  于malloc了一块内存存放该字符串，因此可以将该字符串变量作为结果
  返回。

模块化：
==============================

- 视频 video.c
- 声音 sound.c 包含播放音乐的rixplay模块
- 字体 font.c
- 游戏内文本 text.c
- 输入 input.c
- 资源管理器 res.c
- 调色板：palette.c

游戏相关：

- 场景 scene.c
- 脚本 script.c

游戏处理技巧
==============================

- 地图数据结构：一个TILE数组，一个地图编号。每个TILE只是一个无符
  号整数，某些位代表第一层的精灵索引，某些位代表第二层的精灵索引，只
  有一位表示是否阻挡，值得学习。需要注意的是，地图并不等同于场景，场
  景表示使用哪个地图，还有会发生在该场景的数据对象。
- 地图画法：先画好底层地图，再画顶层地图，最后画精灵（把要画的精灵
  页面和遮挡住精灵的Tile排入一个队列，按y坐标排序，依次画出）。
- 事件对象：这个结构体内包含触发事件的精灵，精灵位置，精灵动画，
  以及事件脚本。
- 资源管理：每次更换场景，释放上一个场景的资源（地图和精灵），重
  新从压缩文件中解压本场景需要的资源，包括玩家的精灵。
- 存档：用一个结构体存放要保存的数据，从而简化了保存过程。
- 经验：用一个结构体存放一个角色的各种经验，如成长经验、普通攻击
  经验，用法术经验、防御经验、躲闪经验甚至逃跑经验。
- 输入处理：输入子系统初始化时
  SDL_SetEventFilter(PAL_EventFilter)，在
  PAL_EventFilter(SDL_Event)中调用PAL_KeyboardEventFilter(event)
  和PAL_MouseEventFilter(Event)分别对键盘和鼠标事件进行处理。处理
  时只记录按键状态，并不对输入进行处理，而是在一帧开始时集中处理。

战斗模块(fight.c)
------------------------------

- 角色的HP少于1/5，则处于濒危状态。
- 自动选择敌人时，如果上次打的敌人还没死，就接着打那一个；否则从没
  死的敌人中选择第一个。
- 基础伤害：如果攻击大于敌人的防御，则伤害为 ``攻击 *
  2 - 防御 * 1.6`` ；否则如果攻击大于敌人防御的0.6倍，则伤害为
  ``攻击 - 防御 * 0.6`` ；否则造成的伤害为 0。
- 魔法造成的伤害：第一部分是视自己的魔攻和对方的防御造成的基本伤
  害，用基础伤害算法算得的伤害，再除以4；第二部分是魔法伤害；第三
  部分是元素属性或毒性造成的伤害加成，算法为 ``伤害 * (10 - 抗性)
  / 5`` ；最后战场环境对伤害的加成，算法为 ``伤害 * (10 + 环境加成)
  / 10`` 。
- 物理攻击的伤害：攻击和防御算得的基本伤害，再除以对方对物理攻击
  的抗性。
- 敌人敏捷的计算： ``敏捷属性 + (敌人级别 + 6) * 3`` ，如果得到的
  敏捷值小于20，则算作20。如果对方处于加速状态，乘以 1.2；如果对
  方处于减速状态，乘以 2/3。
- 玩家及队友敏捷值的计算：敏捷属性 + 各装备增加的敏捷；如果处于加
  速状态，这个值乘以1.2 ；如果处于减速状态，这个值乘以 2/3 ；如果
  处于濒危状态，则乘以 4/5 ；如果超过999，则算作999。
- 更新 TimeChargingUnit： ``(玩家的敏捷值 + 5)^0.3 / 玩家敏捷值``
  ，如果战争速度大于1，则除以 ``1 + (战斗速度 - 1) / 2`` ，否则除
  以1.2 。
- 玩家和敌人的TimeChargingSpeed： ``敏捷 * TimeChargingUnit`` ，
  如果是自动战斗，则为 ``3 * 敏捷 * TimeChargingUnit`` 。

字体
------------------------------

- 汉字的字体文件有两个，一个是wor16.asc，一个是wor16.fon。前者是
  双字节字体编码，后者是前者对应的字形文件。当在屏幕上画一个字时，先
  得到该汉字的 Big5 编码，然后在 wor16.asc 中找到该编码的位置，再
  在 wor16.fon 中的对应位置读取字形数据，根据字形数据一个像素一个
  像素地在屏幕上画出该字。

资源文件
==============================

- gop.mkf: 11M，地图Tile
- rng.mkf: 4.4M，动画文件
- voc.mkf: 2.0M，音效文件
- mgo.mkf: 1.6M，精灵图片
- map.mkf: 1.5M，地图数据
- fbp.mkf: 1.1M，战斗背景图片
- abc.mkf: 999K，貌似是敌人的精灵图片
- fire.mkf: 816K，魔法效果？
- midi.mkf: 745K，音乐文件
- sss.mkf: 557K，脚本数据
- rgm.mkf: 443K，头像图片
- mus.mkf: 324K，RIX音乐文件
- f.mkf: 183K，战斗精灵
- ball.mkf: 132K，物品图片
- data.mkf: 64K，杂项数据
- pat.mkf: 8.3K，调色板(Palette)数据


游戏操作
==============================

游戏启动选项：

- -w width，会设置画面宽度，自动计算高度。
- -w height，会设置画面高度，自动计算宽度。
- -f，全屏。

快捷键：

ALT+RETURN: 切换全屏模式。
ALT+F4: 退出程序。
r: 重复上一次使用的技能。
a: 自动战斗。
d: 防御。
e: 使用物品。
w: 投掷物品。
q: 逃跑。
s: 查看状态。
f: 使用最强力的技能。
p: 截屏。


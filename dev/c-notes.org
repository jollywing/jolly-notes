
#+TITLE: C编程笔记
#+AUTHOR: Jolly Wing (jiqingwu@gmail.com)

* 编程环境及辅助工具
** Question
1. 如果你使用windows，如何获取gcc.
2. 如果你在使用Linux/Unix，如何查看ascii表.
3. 一个程序的编译要经过哪些步骤？
4. 什么是预编译？什么时候需要预编译？
5. 如何用gcc进行预编译？
6. 如何用gcc生成汇编代码，其汇编的格式是什么？
7. 在Linux下，如何查看一个程序依赖哪些动态库？
8. 在Linux下，有什么工具可以检查C程序的语法错误？
9. 在Linux下，如何对一个二进制文件或是目标代码进行反汇编。
** Answer
1. 可以安装 /mingw/ 或是 /DEV C++/.
2. =man ascii=
3. 预编译（引入头文件，展开宏，去除注释） - 编译（得到汇编代码） - 汇编(得到目标代码) - 链接（生成二进制文件）.
4. 预编译对源文件进行初步处理，引入头文件的内容，展开宏，去除注释。在汇编之前要进行预编译。
5. =gcc -E -o hello2.c hello.c= 将 hello.c 进行预处理，展开宏，去除注释，输出到 =hello2.c= 中。
6. =gcc -S -o hello.s hello.c= 汇编 hello.c ，生成 hello.s 。生成的汇编格式是
   AT&T 格式的 x86 汇编，通常我们在 windows 上见到的是 Intel 汇编。
7. 用 =ldd= 可以查看一个执行程序依赖哪些动态链接库，比如你的执行文件是
   =hello= ，你可以用 =ldd hello= 查看它依赖的动态链接库。
8. =lint= 用于对c程序进行静态检查，检查语法错误或质量不高的地方。在
   /archLinux/ 的软件仓库里有 =splint= 可用。clang似乎也可以检查c程序的语法错误。
9. 如果你安装了binutils，程序中就会有objdump，objdump是Linux下的反汇编工具。
   比如说有个执行文件是 test, 我们可以用 objdump -s -d test > test.txt 。然后
   打开 test.txt 查看test的反汇编代码。-s 表示用十六进制的形式打印所有段。-d
   将所有包含执行的段反汇编。Linux下目标文件和可执行文件都是ELF格式，所以
   objdump也可以查看目标文件的反汇编代码，只不过全局变量的地址都是不准确的，
   只有链接后才会定下来。Windows下的执行文件是PE格式，而VC编译出的目标文件是COFF格式。

* 程序结构
** Question
** Answer
main是入口函数：
#+BEGIN_SRC c
int main(int argc,char*argv[])
{
    ... ...
    return 0;
}
#+END_SRC

- argc 表示参数个数。如果生成的程序叫 `bin` ，在命令行下以 `bin
  para1 para2` 调用时，argc的值是3, `bin` 本身算一个参数。
- argv 是参数数组。

如果程序不需要参数时，可简单的写：
#+BEGIN_SRC c
void main(){
    ... ...
}
#+END_SRC

* 数据类型

指针的指针通常用于指针数组。

** 类型转换

- 可以在变量或常量前用(类型)进行强制类型转换。如：
  #+BEGIN_SRC c
  int a, c;
  float b;
  c = 111;
  b = (float)c;
  a = (int)b;
  #+END_SRC
- 字符串转浮点：double atof(const char \*string)，需要<stdlib.h>和
  <math.h>。如果不能转换为对应类型，返回0.0。
- 字符串转整型：int atoi(const char \*string)，需要<stdlib.h>。如果
  不能转换为对应类型，返回0。
- 字符串转长整型：long atol(const char \*string)，需要<stdlib.h>。
  如果不能转换为对应类型，返回0。

* 算术与逻辑操作符

- +, -, \*, \/。 需要注意的是如果 \/ 的两个操作数都是整数，则整除，
  有一个是实数，就是浮点除。

* 变量
** Question
1. volatile 关键字是什么作用？

- =extern= 用于在局部声明全局变量，表示该变量在别处定义过了，用
  =extern= 引入后，即可使用。
- =static= 修饰局部变量，不改变其作用域，但将其生命周期延展到程序结
  束。修饰全局变量时，不改变其生命周期，但将其作用域限制在本文件
  内。
** Answer
1. volatile 是不稳定、易变的意思。告诉编译器不要把该变量放入寄存器，因为它可能在线程外部被改变。
* 控制流

* 函数声明与函数定义
** Question
1. static修饰函数有什么用？
2. 定义一个函数指针。
3. 用typedef定义一个函数指针类型。
** Answer
1. =static= 修饰函数时，该函数只能在文件内部被访问。利于模块化和信息隐藏。
2. =void (*func)(int);=  =char (*get_char)(char);=
3. =typedef void (*) () FuncPtr;=

* 数据结构
** Question
1. 数组变量能直接复制吗？
2. 结构体能复制吗？
** Answer
1. 数组不能复制，因为赋值符右边的数组地址会退化成指针，而指针不能赋值给数组首地址。
   如，下面的程序是不能编译通过的。
   #+BEGIN_SRC c
   /* Array can not be copied. */
   int main(int argc, char *argv[])
   {
       int a[100];
       int b[100];
       /* error: incompatible types when assigning to type
          ‘int[100]’ from type ‘int *’ */
       b = a;
       return 0;
   }
   #+END_SRC
2. 能。结构体其实是有格式的字节数组。因为编译器知道一个结构体的长度，所以结
   构体可以复制。这样，包含在结构体内部的字符数组同样可以复制。比如：
   #+BEGIN_SRC c    
   typedef struct{
       int data[100];
   } Data;
   
   Data a, b;
   a = b;
   #+END_SRC


* 数学函数库

** 随机数

- =int rand()= 返回一个伪随机数，需要 =<stdlib.h>= 。
- =void srand(unsigned int seed)= 为 =rand()= 产生随机数设置起始
  点， =srand(1)= 会重新初始化 =rand()= 。

** 几何函数

- =double _hypot(double x, double y)= 计算直角三角形斜边长度。


* 预处理

** Question
1. 下面是一个交换两个整型值的宏：
   #+BEGIN_SRC c
   #include <stdio.h>
   
   #define SWAP(a,b)       \
       do{                 \
           int t = a;      \
           a = b;          \
           b = t;          \
       }while(0)
   
   int main()
   {
       int c=1, d=2;
       int t;  // 测试 SWAP 与环境的兼容性
   
       SWAP(c,d);
   
       printf("c:%d d:%d\n", c, d);
       return 0;
   }
   #+END_SRC
   do{...}while(0) 有什么作用？

** Answer
1. 使用 =do{...}while(0)= ， 中间的语句用大括号括起来了，所以是另一个命名空
   间，其中的新变量 t 不会发生命名冲突。

** 用#字符串化

标题我没打错，这里要说的就是井号，#的功能是将其后面的 宏参数进行字符串化操作。比如下面代码中的宏：

#+BEGIN_SRC c
#define WARN_IF(EXP) \
do{ if (EXP) \
    fprintf(stderr, "Warning: " #EXP "\n"); } \
while(0) 
#+END_SRC

那么实际使用中会出现下面所示的替换过程：
~WARN_IF (divider == 0);~ 被替换为
#+BEGIN_SRC c
do { if (divider == 0) 
    fprintf(stderr, "Warning: " "divider == 0" "\n"); 
} while(0); 
#+END_SRC

需要注意的是C语言中多个双引号字符串放在一起会自动连接起来，所以如果 divider 为 0 的话，就会打印出：
: Warning: divider == 0

** 连接符##

#还是比较少用的，##却比较流行，在linux0.01中就用到过。##被称为连接符，用来将
两个记号（编译原理中的词汇）连接为一个记号。看下面的例子吧（add.c）：

#+BEGIN_SRC c
#include <stdio.h>

#define add(Type)               \
Type add##Type(Type a, Type b){ \
    return a+b;                 \
}
#+END_SRC

下面两条是奇迹发生的地方
#+BEGIN_SRC c
add(int)
add(double)

int main()
{
    int a = addint(1, 2);
    double d = adddouble(1.5, 1.5);

    printf("a:%d d:%lf\n", a, d);
    return 0;
}
#+END_SRC
那两行被替换后是这个样子的：
#+BEGIN_SRC c
int addint(int a, int b){ return a+b; }
double adddouble(double a, double b){ return a+b; }
#+END_SRC



* 关键字
由ANSI标准定义的C语言关键字共32个 :

  auto double int struct break else long switch

  case enum register typedef char extern return union

  const float short unsigned continue for signed void

  default goto sizeof volatile do if while static

  根据关键字的作用，可以将关键字分为数据类型关键字和流程控制关键字两大类。

  1 数据类型关键字

  A基本数据类型（5个）

  void ：声明函数无返回值或无参数，声明无类型指针，显式丢弃运算结果

  char ：字符型类型数据，属于整型数据的一种

  int ：整型数据，通常为编译器指定的机器字长

  float ：单精度浮点型数据，属于浮点数据的一种

  double ：双精度浮点型数据，属于浮点数据的一种

  B 类型修饰关键字（4个）

  short ：修饰int，短整型数据，可省略被修饰的int。

  long ：修饰int，长整形数据，可省略被修饰的int。

  signed ：修饰整型数据，有符号数据类型

  unsigned ：修饰整型数据，无符号数据类型

  C 复杂类型关键字（5个）

  struct ：结构体声明

  union ：共用体声明

  enum ：枚举声明

  typedef ：声明类型别名

  sizeof ：得到特定类型或特定类型变量的大小

  D 存储级别关键字（6个）

  auto ：指定为自动变量，由编译器自动分配及释放。通常在栈上分配

  static ：指定为静态变量，分配在静态变量区，修饰函数时，指定函数作用域为文件内部

  register ：指定为寄存器变量，建议编译器将变量存储到寄存器中使用，也可以修饰函数形参，建议编译器通过寄存器而不是堆栈传递参数

  extern ：指定对应变量为外部变量，即在另外的目标文件中定义，

  const ：与volatile合称“cv特性”，指定变量不可被当前线程/进程改变（但有可能被系统或其他线程/进程改变）

  volatile ：与const合称“cv特性”，指定变量的值有可能会被系统或其他进程/线程改变，强制编译器每次从内存中取得该变量的值

  2 流程控制关键字

  A 跳转结构（4个）

  return ：用在函数体中，返回特定值（或者是void值，即不返回值）

  continue ：结束当前循环，开始下一轮循环

  break ：跳出当前循环或switch结构

  goto ：无条件跳转语句

  B 分支结构（5个）

  if ：条件语句

  else ：条件语句否定分支（与if连用）

  switch ：开关语句（多重分支语句）

  case ：开关语句中的分支标记

  default ：开关语句中的“其他”分治，可选。

  C 循环结构（3个）

  for ：for循环结构，for(1;2;3)4;的执行顺序为1->2->4->3->2...循环，其中2为循环条件

  do ：do循环结构，do 1 while(2); 的执行顺序是 1->2->1...循环，2为循环条件

  while ：while循环结构，while(1) 2; 的执行顺序是1->2->1...循环，1为循环条件

  以上循环语句，当循环条件表达式为真则继续循环，为假则跳出循环。

auto 声明变量为一般形式的变量。其实，我们平时用的大部分变量都是这种类型。

break 强行中断语句。一种用法是在switch语句中扮演将case中断的角色，另一个用法是扮演强迫一般循环(for,while,do while)语句中断。

case 见switch语句说明。

char 声明一个变量为字符型。占1个字节，表示256个不同的值。在C语言系统中，这些值是根据ASCII码排列的，包含小写字母，大写字母，数字，标点符号及其它一些特殊符号，

const 声明一个值为常量。一旦声明后，这个值在整个程序中都不会变化,直到程序结束。

continue 和break语句类似，但continue令循环重新回到测试位置，而忽略continue和循环终止之间的程序语句。

default 见switch的说明。

do 与while连用组成循环语句。它与for和while的不同在于：for,while循环将条件放在开始，而do...while则把条件放在后面判断循环体是否结束。格式：

  do{循环体}while(条件表达式);

double 声明一个变量为双精度浮点型。占4个字节，可表示16位有效数字。

else 见if的说明。

enum 枚举数据类型标识符

extern  

float 声明一个变量为浮点型。占4个字节，可表示8位有效数字。

for 循环控制标识。格式为：

  for(表达式1；表达式2；表达式3）{...语句...}

它常用来控制指定次数的循环，如：

  for(i=0;i<10;i++) printf("%d",i); 便可循环10次。

注意：括号中的3个表达式任何一个都可省略，但分号不可省略。

goto 无条件跳转语句。好的结构化程序应尽量避免使用此语句，因为它会破坏程序的结构性和可读性。调用语法：goto label;

其中label为位置标识，即告诉goto语句要跳到哪儿。label后面要加上冒号。

if 判断语句标志。格式为：

  if(条件表达式){...语句...}

它常和else连用，用于选择执行一个语句或一组语句。格式为：

  if(条件表达式){...语句...} else{...语句...}

int 声明一个变量为整型。占2个字节，最大表示范围：-32768到32767（十进制）。

long 声明一个变量为长整型。长整型变量占4个字节，最大表示范围：-2147483648（十进制）到2147483647（十进制）。

register 将所声明的变量放在寄存器中，这样可加快程序的速度。如果寄存器内没有足够的空间，系统便会在内存中分配auto变量给你。通常此命令对设计操作系统的程序员有用，对一般程序员用处不大。特别的,turbo c2.0从来也不会将变量放到寄存器中。当你用register声明一个变量后。他自动将它放到内存中。 

return 返回结果标识符。常用在子函数中，用于返回所要得到的值。也可用于main()函数中：

main(){......return 0；}有的程序员习惯于这种形式。

short 声明一个变量为短整型。短整型占2个字节，最大表示范围：-32768到32767.

signed 

sizeof 计算变量的长度。用法：sizeof(变量类型);

static 声明一个变量为局部静态变量。

struct 结构数据类型标识符。

switch 判断语句标识符。主要用于有很多可能的结果的情况，一般必须和case语句连用还常与default连用，意义是若case中的条件都不成立就执行default后的语句。格式：

  switch(变量){case 条件1：{...语句... break;}

        case 条件2：{...语句... break;}...

         default:  {...语句...break;}  }

typedef  

union 联合数据类型标识符。

unsigned 声明一个变量为无符号型。格式：unsigned 变量类型 变量名称；如：unsigned int a;

void 声明变量或函数为无值型的。比如，很多程序员习惯将main()函数声明成void型。即：

void main(){.......} 

volatile 声明一个变量为可能意外变化的量（相对于const而言）。

while 循环控制标识符，和for基本相同，但不如for表达式丰富。具体用那一个，通常看个人习惯，特殊情况下用其中一个比另一个简洁一些。格式：

  while(条件表达式){...语句...} 如：

  while(!kbhit()) printf("any key for quit\n");


* Naming rules
** Intention Revealing
选择好名字要花时间，但是值得
要不断改进，使用更好的命名
如果一个名字还需要注释，那么这个名字没有反应它的意图。
** Avoid disinformation
不要用类似Unix平台上的变量缩写
不要误导程序员，如果account不是放在一个List容器中，就不要用accountList, 用accounts更好。
变量名之间最好有足够大的差异，方便读代码的人区分。
** Make Meaningful Distinctions
避免用序号区分变量。

警惕噪音词，variable不应该出现在变量名中。nameString和name有什么不同呢？
moneyAmount和money有什么不同呢？ accountData和account又有什么不同？
** Use Pronounceable Names
(I have an annoying habit of pronouncing everything as written)
** Use Searchable Names
单字符变量名和数字常量都是对搜索不友好的。
My personal preference is that single-letter names can ONLY be used as local vari-
ables inside short methods.
** Avoid Encodings
对于Windows API来说，匈牙利命名法是很重要的。
但是现在，匈牙利命名法和其它类型编码的命名法都没有必要。
如果使用类型编码，你修改变量类型的时候，还要修改变量的名字。
成员前缀(m_)也没有必要。
** Avoid Mental Mapping
One difference between a smart programmer and a professional programmer is that
the professional understands that clarity is king.

类命应该是名词或名词词组.
方法名应该是动词或动词词组。如 save, deletePage.
* Working Effectively with Legacy Code
在遗产代码上工作的三要素： sensing, separation, seams.

** What is legacy code?
什么是遗产代码？就是我们从他人那里得到的代码。对于程序员来说，通常用来指难以修改的代码。对于我（《Working Effectively with Legacy Code》一书的作者）来说，遗产代码就是没有测试的代码。如果有测试，我们就能自信且迅速地改变代码的行为。没有测试，我们就无法知道我们的修改使代码变好还是变坏了。

(Legacy code is code that we've gotten from someone else.
In the industry, legacy code is often used as a slang term for difficult-to-change code that we don't understand.
To me, legacy code is simply code without tests. With tests, we can change the behavior of our code quickly and verifiably. Without them, we really don't know if our code is getting better or worse.
This book is about being able to confidently make changes in any code base.)
** primary reasons to change software.
1. Adding a feature
Behavior is the most important thing about software. It is what users depend on. Users like it when we add behavior (provided it is what they really wanted), but if we change or remove behavior they depend on (introduce bugs), they stop trusting us.

2. Fixing a bug
3. Improving the design
The act of improving design without changing its behavior is called refactoring.

4. Optimizing resource usage
Preserving existing behavior is one of the largest challenges in software development.

Work on legacy code base, we need ask:
1. What changes do we have to make?
2. How will we know that we've done them correctly?
3. How will we know that we haven't broken anything?
** Unit Testing
如果一个测试设计下列方面，就不是单元测试：
1. 该测试操作了实际的数据库
2. 该测试进行了实际的网络通信
3. 该测试访问了文件系统
4. 为了运行测试，你需要修改程序的运行环境，比如编辑配置文件
** Algorithm to work with legacy code
1. 确定要改变的行为
2. 找到要加测试的地方
3. 去除依赖
4. 写测试（针对程序的新行为先写测试）
5. 改写代码和重构

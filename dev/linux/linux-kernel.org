
* Linux Kernel
** version number
第一个数从1996年起就是2。
第二个数是偶数表示稳定版，如果是奇数表示开发版。
但是从2.6之后，第二个数不再代表稳定和开发中的意思。
第三个数表示release。
第四个数表示patch。如2.6.11.12。
** process
*** process descriptor
    CLOSED: [2013-03-31 Sun 09:02]
**** PC (program counter) and SP (stack pointer)
**** the general purpose registers
**** the float point registers
**** the processor control registers
**** the memory management registers
*** address space
    CLOSED: [2013-03-31 Sun 09:02]
**** private stack
**** data area
**** code area
**** share
***** automatic by kernerl
***** shared memory for interprocess communication
***** Memory mapping: mmap()
*** signal and interprocesses communication
**** System V IPC
***** semaphores
semget()
***** message queues
msgget(), msgsnd(), msgrcv()
***** shared memory
shmget() to create, shmat() to return address, shmdt() to detach
*** init process
**** child processes: wait4()
*** job
**** process descriptor contains a process group id
**** each group of processes has a group leader
whose PID = process group ID
*** pthread
pthread = POSIX thread library

*** Task State Segment
included in 80x86 for storing hardware contexts of processes.
Linux doesn't use hardware context switching, but it uses TSS for:
(1) store/fetch the address of the Kernel mode stack;
(2) sotre I/O Permission Bitmap.
** UserMode and KernelMode
*** kernel routine
**** system call
**** CPU executing the process signals a exception
**** peripheral device interrupt
**** kernal thread
*** Kernel Mode
**** reentrant
several processes may be executing in Kernel Mode at the same time.
***** reentrant functions
modify only local variables and do not alter global data structrues
***** nonreentrant functions and locking mechanisms
**** synchronize
***** disabling kernel preemption
is not enough for multiprocessor systems
***** disabling hardware interrupts
is not sufficient for multiprocessor, and reduce hardware efficiency.
***** semaphore
in multiprocessor systems, semaphore are not always the best solution
****** an integar variable
****** a list of waiting processes
****** Two atomic methods: up() and down()
***** spin lock
fit multiprocessor system and useless in uniprocessor system
similar to semaphore, without process list, spin around until lock opened.
***** avoiding deadlock
linux request locks in predefined order.
** OS layer
** File
*** file name
可以是任意字符，但不能是 '/' 和 '\0' 。
*** hard link
目录不可以有硬链接，因为目录树可能变成一个环。
只能在相同的文件系统上生成硬链接。
*** file type
**** device file
***** Block oriented file
***** character oriented file
**** interprocess communication
***** pipe or FIFO
***** socket
*** File Descriptor and Inode
*** File handling
**** fd = open(path, flag, mode)
flag: read, write, read/write, append;
mode: access rights of new file.
**** newoffset = lseek(fd, offset, whence);
whence表明新的偏移是从文件头、当前指针的位置或是文件尾开始计算。
**** nread = read(fd, buf, count);
**** res = close(fd);
**** res = rename(oldpath, newpath);
** Memory Management
*** RAM
**** kernel image
kernel code and kernel static data structures
**** virtual memory
***** virtual address space
***** KMA: Kernel Memory Allocator
*** memory address (80x86)
Logical address ==segmentation unit==> Linear address
==paging unit==> physical address
**** logical address
segment (16 bit) + offset (32 bit)
Linux uses segmentation in a vary limited way.
Linux preferes paging.
The 2.6 version of Linux uses segmentation only when required by the 80x86 architechture.
***** segment descriptor (8 bytes)
****** GDT/LDT
****** code segment descriptor
****** data segment descriptor
****** task state segment descriptor (TSSD)
****** local descriptor table descriptor (LDTD)
***** segmentation registers
****** cs: code segment register
2-bit field: CPU privilege Level 0-3, 0: Kernel Mode, 3: User Mode
****** ss: stack segment register
****** ds: data segment (contains global and static data) register
**** Linear address (virtual address)
**** physical address
**** page
page: groups of data; page frame: physical adresses in main memory.

This allows the same page to be stored in a page frame, then
saved to disk and later reloaded in a different page frame. This
is the basic ingredient of the virtual memory mechanism (see
Chapter 17).

***** page directory
cr3: the physical adress of the page directory.
***** page table
***** offset
***** PAE: physical address extension
from Pentium Pro, address pins from 32 to 36,
address from 4GB to 64GB.
This requires a new paging mechanism that translates 32-bit linear addresses into 36-bit physical ones.
set PAE flag in ~cr4~
Page Size flag in page directory enable 2MB size.

**** memory arbiter
between multiprocessors, processer and DMA
*** Hardware cache
between CPU and DRAM (Dynamic RAM)
static RAM - SRAM
write-through
write-back
*** Translation Lookaside buffers (TLB)
*** Kernel page tables
**** Provisional(临时的) kernel page tables
It is initialized statically during kernel compilation by ~startup_32()~
***** Page Global Directory = Page Upper Directories = Page Middle Directories
contained in swapper_pg_dir.
***** noncontinuous memory allocation
***** fix-mapped linear addresses
** Device Driver
** interrupts
the code executed by an interrupt or by an exception handler is
not a process. It is lighter than a process.
*** Interrupt vector
Each interrupt or exception is identified by a number ranging
from 0 to 255
*** Synchronous interrupts
produced by CPU control unit
after terminating the execution of an instruction
called as ~Exception~
**** Faults
can be corrected.
The saved value of eip is the address of the instruction that caused
the fault.
such as =Page Fault=.
**** Traps
The saved value of eip is the address of the instruction that should
be executed after the one that caused the trap.
The main use of traps is for debugging purposes.
**** Aborts
A serious error occurred;
this force the affected process to terminate.
**** Programmed exceptions
are handled by the control unit as traps;
they are often called software interrupts.
*** Asynchronous interrupts
**** produced by interval timers and I/O devices
**** called as ~Interrupts~
**** Maskable vs Nonmaskable
** 名词条目
寄存器
微处理器内部寄存器的大小、数量和类型完全取决于微处理器的类型。
栈
处理器必须能够存取大量的(CPU) 外部随机存储器，以存取临时数据。 栈就是一种在RAM中方便地存取数据的方式。有些存储器的栈朝顶端向上增长， 有些存储器向存储器底端向下增长，有的处理器两种增长方式都支持，如ARM。
专用寄存器
任何微处理器都会有一定数量的通用寄存器和少量的专用寄存器。 专用寄存器包括程序计数器 (PC)、栈指针 (SP)、处理器状态寄存器 (PS)。 其中处理器状态寄存器保存处理器的状态信息：例如处理器处于核心模式 还是用户模式，寄存器X的值是否大于寄存器Y的值。
IO空间
硬件外设所占用的存储器空间称为IO空间。IO空间只使用了地址空间， 并没有占用RAM。CPU通过IO空间访问IO控制器的寄存器。 除DMA控制器外，IO设备的控制器并不能直接访问系统空间存储器。
操作系统
允许用户运行应用程序的系统程序的集合。
设备驱动程序
设备驱动程序为操作系统与硬件设备交互提供接口，构成Linux内核的主要部分。 设备驱动程序针对它们驱动的特定的控制器芯片。
散列表
散列表是数据结构指针的数组。散列表加速了对经常使用的数据结构的访问， Linux经常使用散列表来实现高速缓存。
接口
接口是例程和数据结构的集合。
页表
页表用于从虚拟页到物理页的映射，每个进程有自己的页表。 在进程X中，映射到物理页1的虚拟页是6，在进程Y中， 映射到物理页1的虚拟页不一定是6。可能每个进程的虚拟地址空间都是从0开始的。
物理寻址模式
这就是实模式吧。操作系统本身运行在虚拟内存中没什么实际意义。 Linux内核就运行在物理寻址模式下，这种模式下不需要进行地址转换。

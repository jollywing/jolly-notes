
* 图
** 概念
G(V, E); V是有穷非空的顶点集合.
无向图： (A, B) 表示顶点A和顶点B的无向边.
有向图： <A, B> 表示从A到B的有向边. 有向边也称为弧.
简单图：不存在顶点到其自身的边，同一条边也不重复出现.
无向完全图：任意两个顶点间都存在边的无向图. 边的数量：n(n-1)/2.
有向完全图：任意两个顶点间存在方向相反的两条弧. 边的数目: n(n-1).
稀疏图: 边数很少.
稠密图: 边数很多.
权: 图中和边相关的数字.
网: 带权的图.
顶点V的度: 和v相关联的边的数目. 记为TD(V).
~e = \frac{1}{2} \sum_{i=1}^n TD(v_i)~

对于有向图, 如果 <v, v'> 属于 E, 称 v *邻接到* v',
v' *邻接自* v.
入度： 以v为头的边的数目, 记为 ID(v).
出度: 以v为尾的边的数目, 记为 OD(v).
TD(v) = ID(v) + OD(v).
e = \sum_{i=1}^n ID(v_i) = \sum_{i=1}^n OD(v_i).

简单路径：没有重复的顶点.
回路或环: 第一个顶点和最后一个顶点相同.

连通图： 如果从顶点v到v'有路径，称v和v'是连通的.
如果G中任意两个顶点都是连通的，称G为连通图.
连通分量: 无向图中的极大连通子图.

强连通图: 在有向图G中，对于任意的v_i, v_j, v_i \ne v_j,
如果从v_i到v_j和从v_j到v_i都存在路径，则G为强连通图.

强连通分量: 有向图中的极大强连通子图.

连通图的生成树：一个极小的连通子图，含有全部n个顶点，但只有n-1条边。

如果一个图有n个顶点，却少于 n-1 条边，必定不是连通图.
如果多于n-1条边, 必定含有环.

有向图：如果一个有向图只有一个顶点的入度为0，其余顶点入度均为1，则是一个有向树.
有向图的生成森林：由若干颗有向树组成，含有图中全部顶点，但只有足以构成若干颗不想交的有向树的弧.
** 存储结构
1. 邻接矩阵.
   一维数组存储顶点.
   二维数组存储边.
   缺点：对于稀疏图，内存空间浪费较多.
2. 邻接表
   一维数组存储顶点
   用链表存储每个顶点的邻接顶点
   缺点：对于有向图，需要两张表，邻接表和逆邻接表
3. 十字链表
4. 邻接多重表
   顶点：数据；指向第一条边的指针
   边： ivex, ilink, jvex, jlink
   优点：适用于无向图，删除边时速度快。
5. 边集数组
   顶点：一位数组
   边：数组存储，每个元素包括： begin, end, weight.

* 排序
将学生的总分从高到低排序
如果总分相同，则按语文数学的总分从高到低排序。
有什么方法避免二次排序。
答：总分x1000 + 语数总分。按这个一次性排序。

稳定排序和不稳定排序的区别是什么？
答：给定一个线性序列，A和B的比较项相等，如果排序后A和B的先后顺序保持不变，称为稳定排序。
否则就是不稳定排序。

内排序和外排序的区别是什么？
内排序，数据全部放在内存中；外排序，因为要排序的数据太多，一次只将部分数据放入内存进行操作，
整个排序过程要多次在内外存间交换数据。

七种经典的排序算法。
简单算法：冒泡、选择、插入。
改进算法：希尔排序、堆排序、归并排序、快速排序
** 冒泡
** 快速排序
